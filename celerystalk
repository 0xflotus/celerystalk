#!/usr/bin/env python

"""
Usage:
    celerystalk import [-f <nmap_file>] [-S scope_file] [-D subdomains_file] [-w <workspace>] [-o <output_dir>] [-u <url>]
    celerystalk find_subdomains -d <domains> [-w <workspace>] [-o <output_dir>] [-s]
    celerystalk scan [-t <targets>] [-w <workspace>] [-s]
    celerystalk scan [-o <output_dir>] -u <url> [-w <workspace>] [-s]
    celerystalk scan [-o <output_dir>] -f <nmap_file> [-w <workspace>] [-t <targets>] [-d <domains>] [-S scope_file] [-D subdomains_file] [-s]
    celerystalk rescan [-t <targets>] [-w <workspace>] [-s]
    celerystalk query [-w <workspace>] ([full] | [summary] | [brief]) [watch]
    celerystalk query [-w <workspace>] [watch] ([full] | [summary] | [brief])
    celerystalk report [-w <workspace>]
    celerystalk cancel ([all]|[<task_ids>]) [-w <workspace>]
    celerystalk pause  ([all]|[<task_ids>]) [-w <workspace>]
    celerystalk resume ([all]|[<task_ids>]) [-w <workspace>]
    celerystalk db workspaces
    celerystalk db ([services] | [hosts] | [paths]) [-w <workspace>]
    celerystalk db export [-w <workspace>]
    celerystalk shutdown
    celerystalk (help | -h | --help)

Options:
    -h --help           Show this screen
    -v --version        Show version
    -f <nmap_file>      Nmap xml import file
    -o <output_dir>     Output directory
    -S <scope_file>      Scope import file
    -D <subdomains_file> Subdomains import file
    -t <targets>        Target(s): IP, IP Range, CIDR
    -u <url>            URL to parse and scan with all configured tools
    -w <workspace>      Workspace [default: Default]
    -d --domains        Domains to scan for vhosts
    -s --simulation     Simulation mode.  Submit tasks comment out all commands

Examples:

    Start from Nmap XML file:
                ./celerystalk scan -f /pentest/nmap.xml -o /pentest
    Start from Nessus file:
                ./celerystalk scan -f /pentest/scan.nessus -o /pentest
    Specify a workspace (Uses [Default] workspace if not specified):
                ./celerystalk scan -f <file> -o /pentest -w test
    Find in scope vhosts using subdomain recon tools and scan any subodmain that is resolves ton an IP in scan file:
                ./celerystalk scan -f <file> -o /pentest -d domain1.com,domain2.com
    Scan subset hosts in Nmap/Nessus XML:
                ./celerystalk scan -f <file> -o /pentest -w test -t 10.0.0.1,10.0.0.3
                ./celerystalk scan -f <file> -o /pentest -w test -t 10.0.0.100-200
                ./celerystalk scan -f <file> -o /pentest -w test -t 10.0.0.0/24
    Simulation mode:
                ./celerystalk scan -f <file> -o /pentest -s
    Query tasks:
                ./celerystalk query [-w workspace]
    Create a report for all scanned hosts in a workspace:
                ./celerystalk report [-w workspace]
    Cancel/Pause/Resume tasks 5, 6, and 10-20 in the Default workspace:
                ./celerystalk <verb> 5,6,10-20
    Cancel/Pause/Resume all tasks in the Default workspace:
                ./celerystalk <verb> all
    Cancel/Pause/Resume all tasks in the test workspace:
                ./celerystalk <verb> all -w test
    Cancel/Pause/Resume all tasks related to 10.0.0.1 in the Default workspace:
                ./celerystalk <verb> 10.0.0.1
    Cancel/Pause/Resume all tasks related to 10.0.0.0/24 in the Default workspace:
                ./celerystalk <verb> 10.0.0.0/24
    List all current workspaces in the database:
                ./celerystalk db workspaces
    List all hosts in the Default workspace
                ./celerystalk db hosts [-w workspace]
    List all services in the Default workspace
                ./celerystalk db services
    List all paths in the Default workspace
                ./celerystalk db paths
    Save hosts,services, and paths as CSV files in the output directory associated with a workspace
                ./celerystalk db export
    Shutdown celery processes:
                ./celerystalk shutdown
"""

# Not ready yet (still in dev):
# celerystalk scan -f <nmap_file> -o <output_dir> [-w <workspace>] [-t <targets>] [-d <domains>] [-b <bb_scope_file>] [-s]
# -b --bb_scope_file  Bug Bounty mode. Reads scope file to determine scope, not an initial nmap/nessus file.

from docopt import docopt
import os
from time import sleep
import sys
import subprocess
import lib.cancel
import lib.scan
import lib.resume
import lib.pause
import lib.utils
import lib.report
import lib.query
import lib.csimport
import lib.config_parser
from lib import db
from prettytable import PrettyTable
import csv

from lib.csimport import importcommand

build=str(110)

def print_banner():

    print("\ncelerystalk  -\tAn asynchronous network enumeration/vulnerability scanner ")
    print("\t\tRun all your tools against all your hosts (IPs/virtual hosts/subdomains)")
    print("\t\tby @sethsec")
    print("\t\tBuild: {0}\n".format(build))





def main(arguments):
    if arguments["-w"]:
        workspace = arguments["-w"]
    else:
        workspace = 'Default'



    db.create_task_table()
    db.create_path_table()
    db.create_services_table()
    db.create_vhosts_table()
    db.create_workspace_table()

    # Query - Inform user about job status
    if arguments["query"]:
        try:
            if arguments["watch"]:
                if arguments["summary"]:
                    subprocess.call(["watch", "./celerystalk", "query", "summary","-w",workspace])
                else:
                    subprocess.call(["watch", "./celerystalk", "query", "brief","-w",workspace])
            else:
                if arguments["summary"]:
                    lib.query.query_sqlite(workspace,summary=arguments["summary"])
                elif arguments["brief"]:
                    lib.query.query_sqlite(workspace,repeat=True)
                else:
                    lib.query.query_sqlite(workspace)
        except KeyboardInterrupt:
            sys.exit(0)
        except EnvironmentError as e:
            print(e)

    if arguments["cancel"]:
        paused_tasks = db.get_paused_tasks(workspace)
        running_tasks = db.get_running_tasks(workspace)
        pending_tasks = db.get_pending_tasks(workspace)
        if (len(pending_tasks) == 0) and (len(running_tasks) == 0) and (len(paused_tasks) == 0):
            print("[+] There were no tasks to cancel. Are you sure you have the right workspace?\n")
            exit()

        if arguments["all"]:
            lib.cancel.cancel_tasks("all", workspace)
        elif arguments["<task_ids>"]:
            lib.cancel.cancel_tasks(arguments["<task_ids>"], workspace)
        exit()

    if arguments["pause"]:
        if arguments["all"]:
            num_paused = lib.pause.pause_running_tasks("all",workspace)
            sleep(3)
            num_paused = lib.pause.pause_running_tasks("all",workspace,repeat="True")
        elif arguments["<task_ids>"]:
            num_paused = lib.pause.pause_running_tasks(arguments["<task_ids>"], workspace)
        else:
            print("[!] You need to specify the tasks to pause, or specify \"all\".\n")
            exit()
        if num_paused > 0:
            print("\n")
        else:
            print("[+] There were no tasks to pause.\n")
        exit()

    if arguments["resume"]:
        if arguments["all"]:
            num_resumed = lib.resume.resume_paused_tasks("all",workspace)
        elif arguments["<task_ids>"]:
            num_resumed = lib.resume.resume_paused_tasks(arguments["<task_ids>"], workspace)
        else:
            exit()
        if num_resumed > 0:
            print("\n")
        else:
            print("[+] There were no tasks to resume.\n")
        exit()


    if arguments["shutdown"]:
        lib.utils.shutdown_background_jobs()
        exit()


    ####################################
    # Run Report
    ####################################
    if arguments["report"]:
        if arguments["-t"]:
            target_list = lib.utils.target_splitter(arguments["-t"])
            lib.report.report(workspace, target_list)
        else:
            lib.report.report(workspace)
        exit()



    ####################################
    # Dump data from DB
    ####################################
    if arguments["db"]:
        if arguments["workspaces"]:

            columns = ["Workspace", "Output Directory"]
            workspace_rows = lib.db.get_all_workspaces()
            workspaces_table = PrettyTable(columns)
            for row in workspace_rows:
                workspaces_table.add_row(row)
            print(workspaces_table)
            print("\n\n")
        else:
            if arguments["hosts"]:
                print("[+] Showing hosts for the [{0}] workspace\n".format(workspace))
                columns = ["IP","Vhost","In Scope","Submitted"]
                host_rows = lib.db.get_vhosts_table(workspace)
                hosts_table = PrettyTable(columns)
                hosts_table.align[columns[0]] = "l"
                hosts_table.align[columns[1]] = "l"
                for row in host_rows:
                    hosts_table.add_row(row)
                print(hosts_table)
                print("\n\n")
            elif arguments["services"]:
                print("[+] Showing services for the [{0}] workspace\n".format(workspace))
                columns = ["IP", "Port", "Protocol","Service"]
                services_rows = lib.db.get_all_services(workspace)
                services_table = PrettyTable(columns)
                services_table.align[columns[0]] = "l"
                services_table.align[columns[1]] = "l"
                services_table.align[columns[3]] = "l"
                for row in services_rows:
                    services_table.add_row(row[1:5])
                print(services_table)
                print("\n\n")
            elif arguments["paths"]:
                print("[+] Showing paths for the [{0}] workspace\n".format(workspace))
                columns = ["IP", "Port", "Path"]
                paths_rows = lib.db.get_all_paths(workspace)
                paths_table = PrettyTable(columns)
                paths_table.align[columns[0]] = "l"
                paths_table.align[columns[1]] = "l"
                paths_table.align[columns[2]] = "l"
                for row in paths_rows:
                    paths_table.add_row(row[1:4])
                print(paths_table)
                print("\n\n")
            elif arguments["export"]:
                output_dir = db.get_output_dir_for_workspace(workspace)[0][0]
                host_rows = lib.db.get_vhosts_table(workspace)
                hosts_filename = workspace + "_hosts.csv"
                hosts_output_file = os.path.join(output_dir,hosts_filename)
                with open(hosts_output_file, 'wb') as f:
                    writer = csv.writer(f)
                    writer.writerow(["IP","vhost","in_scope"])
                    writer.writerows(host_rows)
                print("[+] Saved all hosts in the [{0}] workspace to {1}".format(workspace,hosts_output_file))

                services_rows = lib.db.get_all_services(workspace)
                services_filename = workspace + "_services.csv"
                services_output_file = os.path.join(output_dir, services_filename)
                with open(services_output_file, 'wb') as f:
                    writer = csv.writer(f)
                    writer.writerow(["IP", "Port", "Protocol","Service"])
                    writer.writerows(services_rows)
                print("[+] Saved all ports in the [{0}] workspace to {1}".format(workspace,services_output_file))
                paths_rows = lib.db.get_all_paths(workspace)
                paths_filename = workspace + "_paths.csv"
                paths_output_file = os.path.join(output_dir, paths_filename)
                with open(paths_output_file, 'wb') as f:
                    writer = csv.writer(f)
                    writer.writerow(["IP", "Port", "Path"])
                    writer.writerows(paths_rows)
                print("[+] Saved all paths in the [{0}] workspace to {1}.\n".format(workspace,paths_output_file))

    ####################################
    # Import Stuff
    ####################################

    if arguments["import"]:
        output_dir = lib.utils.create_workspace(workspace, arguments)
        importcommand(lib, workspace, output_dir, arguments)

    ####################################
    # Find subdomains
    ####################################
    if arguments["find_subdomains"]:
        lib.utils.start_services()
        output_dir = lib.utils.create_workspace(workspace, arguments)
        # workspace_exists = "False"
        # all_workspaces = lib.db.get_all_workspaces()
        #
        # if all_workspaces:  # If if there at least one workspace in the DB
        #     for db_workspace in all_workspaces:
        #         if db_workspace[0] == workspace:  # Is there any workspace that matches our current?
        #             workspace_exists = "True"
        #             # If so, grab the current output dir
        #             output_dir = lib.db.get_output_dir_for_workspace(workspace)[0][0]
        #
        # if workspace_exists == "True":  # If we did find a workspace in the DB that matches the user specified workspace
        #     if not output_dir:  # but if there is no output_dir specified
        #         if arguments["-o"] is None:  # and the user did not specify one at hte command line, yell at the user
        #             print('[!] Define where you would like scan output & reports saved (Eg: -o /assessments/)\n')
        #             exit()
        #         else:
        #             # if the user did specify an output_dir (and a DB one doesnt exist), create the dir
        #             output_dir = os.path.join(arguments["-o"],'')
        #             try:
        #                 os.stat(output_dir)
        #             except:
        #                 print("[+] Output directory does not exist. Creating " + output_dir)
        #                 os.makedirs(output_dir)
        # else:  # If there were no workspaces in the DB that matched the user specified workspace
        #     if arguments["-o"]:  # and the user did specify an output_dir
        #         arg_output_dir = os.path.join(arguments["-o"], '')
        #         if arg_output_dir != output_dir:  # if the user specified output dir is not the same as the db output_dir, ask the user whether they want to update it or ignore the command line output_dir
        #             output_dir_answer = raw_input(
        #                 "[!] The DB shows that the output directory for the [{0}] workspace is [{1}].\n\n   Do you want to update the output directory to [{2}]? (y\N)".format(
        #                     workspace, output_dir, arg_output_dir))
        #             print("")
        #             if (output_dir_answer == "Y") or (
        #                     output_dir_answer == "y"):  # if the user wants to use the command line dir, update the celerystalk db
        #                 lib.db.update_workspace_output_dir(arg_output_dir, workspace)
        #                 print("[+] Updated output directory for [{0}] workspace to [{1}].".format(workspace,
        #                                                                                           arg_output_dir))
        #                 try:
        #                     os.stat(arg_output_dir)
        #                 except:
        #                     print("[+] Output directory does not exist. Creating " + arg_output_dir)
        #                     os.makedirs(arg_output_dir)
        #     else:  # if no workspaces and the user didnt specify an output directory
        #         print('[!] Define where you would like scan output & reports saved (Eg: -o /assessments/)\n')
        #         exit()

        lib.scan.find_subdomains(arguments["<domains>"], arguments["--simulation"], workspace, output_dir,scan_mode="VAPT")



    ####################################
    # ReScan
    ####################################
    if arguments["rescan"]:
        #print(arguments["scan"])

        arguments["scan"] = True
        all_submitted_vhosts = lib.db.get_inscope_submitted_vhosts(workspace)
        if arguments["-t"]:
            target_list = lib.utils.target_splitter(arguments["-t"])
            for target in target_list:
                if target not in all_submitted_vhosts:
                    print("[!] [{0}] has never been submitted, so it can't be rescanned.".format(target))
        for submitted_vhost in all_submitted_vhosts:
            vhost = submitted_vhost[0]
            answer = raw_input("[!] {0} has already been scanned. Scan it again? [Y\\n] ".format(vhost))
            if (answer == "Y") or (answer == "y") or (answer == ""):
                ip = db.get_vhost_ip(vhost,workspace)[0][0]
                db.update_vhosts_submitted(ip, vhost, workspace, 0)


    ####################################
    # Scan
    ####################################

    if arguments["scan"]:
        lib.utils.start_services()
        celery_path = sys.path[0]
        output_dir = lib.utils.create_workspace(workspace, arguments)


        ####################################
        # Scan - URL - Parse use provided URL and run all celerystalk tools against it
        ####################################
        if arguments["-u"]:
            lib.scan.process_url(arguments["-u"], workspace, output_dir, arguments)
            exit()

        if arguments["-t"]:
            target_list = lib.utils.target_splitter(arguments["-t"])
            if arguments["-f"]:
                importcommand(lib, arguments)
            lib.scan.process_db_vhosts(workspace, arguments["--simulation"],target_list=target_list)
        else:
            if arguments["-f"]:
                importcommand(lib, arguments)
            lib.scan.process_db_vhosts(workspace, arguments["--simulation"])




        # ####################################
        # # Scan - Targeted - Parse nessus/nmap then run celerystalk for just some hosts in target file
        # ####################################
        #
        # if arguments["-f"] and arguments["-t"] and not arguments["<bb_scope_file>"]:
        #     importcommand(arguments)
        #
        #     #scan_mode = "VAPT"
        #     #target_list = lib.utils.target_splitter(arguments["-t"])
        #     lib.scan.process_db_vhosts(workspace, arguments["--simulation"], target_list=target_list)
        #
        #
        #
        #     #for target in target_list:
        #     #    #lib.scan.process_db_services(output_dir, arguments["--simulation"], workspace, target=target)
        #     #    lib.scan.process_db_vhosts(workspace,arguments["--simulation"],target_list=target_list)
        #     exit()

        # ####################################
        # # Scan - All - Parse nessus/nmap then run celerystalk for ALL hosts in target file
        # ####################################
        # if arguments["-f"]:
        #     scan_mode = "VAPT"
        #     #lib.scan.process_db_services(output_dir, arguments["--simulation"], workspace)
        #     importcommand(arguments)
        #     lib.scan.process_db_vhosts(workspace, arguments["--simulation"])
        #
        #


        # ####################################
        # # Scan - Bug Bounty mode - take domains, find subdomains, run nmap, run celerystalk (for ALL hosts in target file)
        # ####################################
        #
        # if arguments["<bb_scope_file>"]:
        #     scan_mode = "BB"
        #     in_scope_domains, in_scope_hosts, out_of_scope_hosts = lib.config_parser.read_bb_scope_ini(
        #         arguments["<bb_scope_file>"])
        #
        #
        #     #submit the in scope hosts to celery
        #     for in_scope_host in in_scope_hosts:
        #         in_scope_host = in_scope_host[0]
        #         #try:
        #         ip = socket.gethostbyname(in_scope_host)
        #
        #         #nmap_report = lib.scan.nmap_scan_subdomain_host(in_scope_host, workspace,arguments["--simulation"],output_dir)  # run nmap scan
        #         lib.scan.nmap_scan_subdomain_host(in_scope_host, workspace,arguments["--simulation"],output_dir)  # run nmap scan
        #         db_vhost = (ip, in_scope_host, 1, 0, workspace)  # in this mode all vhosts are in scope
        #         print(db_vhost)
        #         db.create_vhost(db_vhost)
        #         #lib.scan.process_nmap_data2(nmap_report, workspace)
        #         #lib.scan.process_db_services(output_dir, arguments["--simulation"], workspace)
        #         # except:
        #         #     print("2There was an issue running the nmap scan against {0}.").format(in_scope_host)
        #         #     ip = ""
        #         #     db_vhost = (ip, in_scope_host, 0, 0, workspace)  # not in scope if no IP
        #         #     print(db_vhost)
        #         #     db.create_vhost(db_vhost)
        #
        #     for domain in in_scope_domains:
        #         print("domain pulled from in scope domains")
        #         print(domain)
        #         lib.scan.find_subdomains(domain, arguments["--simulation"], workspace, output_dir,
        #                                  scan_mode,out_of_scope_hosts)
        #     #lib.scan.process_db_services(output_dir, arguments["--simulation"], workspace)







            # in_scope_domains_string = ",",join(in_scope_domains)
            # lib.scan.find_subdomains(in_scope_domains_string, arguments["--simulation"], workspace, output_dir,scan_mode)
            #
            #
            # lib.scan.process_db_services(output_dir, arguments["--simulation"], workspace)
            #
            # else:
            #     nmap_report = lib.utils.nmap_parser(arguments["-f"])
            #     #process_nmap_data(nmap_report, output_dir, arguments["--simulation"],workspace)
            #     lib.scan.process_nmap_data2(nmap_report, workspace)
            #     if arguments["<domains>"]:
            #         lib.scan.find_subdomains(arguments["<domains>"], arguments["--simulation"], workspace, output_dir)
            #     lib.scan.process_db_services(output_dir, arguments["--simulation"], workspace)





if __name__ == "__main__":
    arguments = docopt(__doc__, version='Build '+ build)
    print(arguments)
    print_banner()
    if arguments["help"]:
       print(__doc__)
    main(arguments)

