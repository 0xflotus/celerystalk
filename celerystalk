#!/usr/bin/env python

"""
Usage:
    celerystalk workspace create -o <output_dir> [-w workspace_name]
    celerystalk workspace [<workspace_name>]
    celerystalk import [-f <nmap_file>] [-S scope_file] [-D subdomains_file] [-O outOfScope.txt][-u <url>]
    celerystalk subdomains -d <domains> [-s]
    celerystalk scan [-f <nmap_file>] [-t <targets>] [-d <domains>] [-S scope_file] [-D subdomains_file] [-s]
    celerystalk scan -u <url> [-s]
    celerystalk rescan [-t <targets>] [-s]
    celerystalk query ([full] | [summary] | [brief]) [watch]
    celerystalk query [watch] ([full] | [summary] | [brief])
    celerystalk report
    celerystalk cancel ([all]|[<task_ids>])
    celerystalk pause  ([all]|[<task_ids>])
    celerystalk resume ([all]|[<task_ids>])
    celerystalk db ([workspaces] | [services] | [hosts] | [vhosts] | [paths])
    celerystalk db export
    celerystalk shutdown
    celerystalk interactive
    celerystalk (help | -h | --help)

Options:
    -h --help           Show this screen
    -v --version        Show version
    -f <nmap_file>      Nmap xml import file
    -o <output_dir>     Output directory
    -S <scope_file>     Scope import file
    -O <outscope_file>  Out of scope hosts file
    -D <subdomains_file> Subdomains import file
    -t <targets>        Target(s): IP, IP Range, CIDR
    -u <url>            URL to parse and scan with all configured tools
    -w <workspace>      Workspace
    -d --domains        Domains to scan for vhosts
    -s --simulation     Simulation mode.  Submit tasks comment out all commands

Examples:

  Workspace
    Create default workspace    celerystalk workspace create -o /assessments/client
    Create named workspace      celerystalk workspace create -o /assessments/client -w client
    Switch to another worksapce celerystalk workspace client2

  Import
    Import Nmap XML file:       celerystalk import -f /assessments/nmap.xml
    Import Nessus file:         celerystalk import -f /assessments/scan.nessus
    Import list of Domains:     celerystalk import -D <file>
    Import list of IPs/Ranges:  celerystalk import -S <file>
    Specify out of scope hosts: celerystalk import -O <file>

    Import multiple files:      celerystalk import -f nmap.xml -S scope.txt -D domains.txt

  Subdomain Recon
    Find subdomains:            celerystalk subdomains -d domain1.com,domain2.com

  Scan
    Scan all in scope hosts:    celerystalk scan
    Scan subset of DB hosts:    celerystalk scan -t 10.0.0.1,10.0.0.3
                                celerystalk scan -t 10.0.0.100-200
                                celerystalk scan -t 10.0.0.0/24
                                celerystalk scan -t sub.domain.com
    Simulation mode:            celerystalk scan -s

  Import and Scan
    Start from Nmap XML file:   celerystalk scan -f /pentest/nmap.xml
    Start from Nessus file:     celerystalk scan -f /pentest/scan.nessus
    Scan subset hosts in XML:   celerystalk scan -f <file> -t 10.0.0.1,10.0.0.3
                                celerystalk scan -f <file> -t 10.0.0.100-200
                                celerystalk scan -f <file> -t 10.0.0.0/24
                                celerystalk scan -f <file> -t sub.domain.com
    Simulation mode:            celerystalk scan -f <file> -s

  Rescan
   Rescan all hosts:            celerystalk rescan
   Rescan some hosts            celerystalk rescan-t 1.2.3.4,sub.domain.com
   Simulation mode:             celerystalk rescan -s

  Query Mode
    All tasks:                  celerystalk query
    Update status every 2s:     celerystalk query watch
    Show only 5 tasks per mode: celerystalk query brief
    Show stats only             celerystalk query summary
    Show stats every 2s:        celerystalk query summary watch

 Job Control (cancel/pause/resume)
    Specific tasks:             celerystalk cancel 5,6,10-20
                                celerystalk pause 5,6,10-20
                                celerystalk resume 5,6,10-20

    All tasks current worspace: celerystalk cancel all
                                celerystalk pause all
                                celerystalk resume all

  Access the DB
    Show workspaces:            celeryststalk db workspaces
    Show services:              celeryststalk db services
    Show hosts:                 celeryststalk db hosts
    Show vhosts only            celeryststalk db vhosts
    Show paths:                 celeryststalk db paths

  Export DB
    Export current DB:          celerystalk db export

"""


from docopt import docopt
import os
from time import sleep
import sys
import subprocess
import lib.cancel
import lib.scan
import lib.resume
import lib.pause
import lib.utils
import lib.report
import lib.query
import lib.csimport
import lib.config_parser
#import lib.interactive
from lib import db
import lib.workspace
from prettytable import PrettyTable
import csv


build=str(123)

def print_banner():

    print("\ncelerystalk  -\tAn asynchronous network enumeration/vulnerability scanner ")
    print("\t\tRun all your tools against all your hosts (IPs/virtual hosts/subdomains)")
    print("\t\tby @sethsec")
    print("\t\tBuild: {0}\n".format(build))



def main(arguments):

    db.create_task_table()
    db.create_path_table()
    db.create_services_table()
    db.create_vhosts_table()
    db.create_workspace_table()
    db.create_current_workspace_table()

    if arguments["interactive"]:
        prompt = lib.interactive.MyPrompt()
        prompt.prompt = '[celerystalk] '
        prompt.cmdloop('starting...')



    ####################################
    # Workspace Command: allows users to create workspaces or set/change the current workspace
    ####################################

    if arguments["workspace"]:
        if arguments["create"]:
            if arguments["-w"]:
                workspace = arguments["-w"]
            else:
                workspace = 'Default'
            db_workspace = (workspace,)
            output_dir,workspace = lib.workspace.create_workspace(workspace, arguments)
            current_workspace = lib.db.get_current_workspace()
            if not current_workspace:
                db_workspace = (workspace,)
                lib.db.set_initial_current_workspace(db_workspace)
            else:
                lib.db.update_current_workspace(workspace)
        elif arguments["<workspace_name>"]:
            if arguments["<workspace_name>"]:
                workspace = arguments["<workspace_name>"]
            else:
                workspace = 'Default'
            db_workspace = (workspace,)
            current_workspace = lib.db.get_current_workspace()
            if not current_workspace:
                db_workspace = (workspace,)
                lib.db.set_initial_current_workspace(db_workspace)
            else:
                #if the workspace set is not the current workspace, figure out if it exists or if it is new
                all_workspaces = lib.db.get_all_workspaces()
                workspace_exists = "False"
                for db_workspace_name in all_workspaces:
                    db_workspace_name=db_workspace_name[0]
                    if db_workspace_name == workspace:
                        workspace_exists = "True"
                        lib.db.update_current_workspace(workspace)


                if workspace_exists == "False":
                    # if the new workspace doesnt exists, tell the user they need to create it first
                    print("[!] There is no workspace with that name. Here are the known workspaces:\n")
                    columns = ["Workspace", "Output Directory"]
                    workspace_rows = lib.db.get_all_workspaces()
                    workspaces_table = PrettyTable(columns)
                    workspaces_table.align[columns[1]] = "l"
                    for row in workspace_rows:
                        workspaces_table.add_row(row)
                    print(workspaces_table)
                    print("\n")

                    print("[+] If you'd like to create a new workspace:\n\n")
                    print("./celerystalk workspace create -o output_dir                     #Default workspace")
                    print("./celerystalk workspace create -o output_dir -w workspace_name   #Named workspace\n")
                    exit()
        else:
            try:
                workspace = lib.db.get_current_workspace()[0][0]
                output_dir = lib.db.get_output_dir_for_workspace(workspace)[0][0]
            except:
                print("[!] There are no workspaces yet. Create one and run your command again:\n\n")
                print("./celerystalk workspace create -o output_dir                     #Default workspace")
                print("./celerystalk workspace create -o output_dir -w workspace_name   #Named workspace\n")
                exit()
            
            columns = ["Workspace", "Output Directory"]
            workspace_rows = lib.db.get_all_workspaces()
            workspaces_table = PrettyTable(columns)
            workspaces_table.align[columns[1]] = "l"
            for row in workspace_rows:
                workspaces_table.add_row(row)
            print(workspaces_table)
            print("\n")
            print("[+} Current workspace: " + workspace + "\n")






    ####################################
    # Query Command: allows users to view the status of ongoing async scan
    ####################################


    # Query - Inform user about job status
    if arguments["query"]:
        if arguments["-w"]:
            output_dir, workspace = lib.workspace.create_workspace(arguments["-w"], arguments)
        else:
            try:
                workspace = lib.db.get_current_workspace()[0][0]
                output_dir = lib.db.get_output_dir_for_workspace(workspace)[0][0]
            except:
                print("[!] There are no workspaces yet. Create one and run your command again:\n\n")
                print("./celerystalk workspace create -o output_dir                     #Default workspace")
                print("./celerystalk workspace create -o output_dir -w workspace_name   #Named workspace\n")
                exit()
        try:
            if arguments["watch"]:
                if arguments["summary"]:
                    subprocess.call(["watch", "./celerystalk", "query", "summary"])
                else:
                    subprocess.call(["watch", "./celerystalk", "query", "brief"])
            else:
                if arguments["summary"]:
                    lib.query.query_sqlite(workspace,summary=arguments["summary"])
                elif arguments["brief"]:
                    lib.query.query_sqlite(workspace,repeat=True)
                else:
                    lib.query.query_sqlite(workspace)
        except KeyboardInterrupt:
            sys.exit(0)
        except EnvironmentError as e:
            print(e)

    ####################################
    # Cancel command
    ####################################

    if arguments["cancel"]:
        if arguments["-w"]:
            output_dir, workspace = lib.workspace.create_workspace(arguments["-w"], arguments)
        else:
            try:
                workspace = lib.db.get_current_workspace()[0][0]
                output_dir = lib.db.get_output_dir_for_workspace(workspace)[0][0]
            except:
                print("[!] There are no workspaces yet. Create one and run your command again:\n\n")
                print("./celerystalk workspace create -o output_dir                     #Default workspace")
                print("./celerystalk workspace create -o output_dir -w workspace_name   #Named workspace\n")
                exit()
        paused_tasks = db.get_paused_tasks(workspace)
        running_tasks = db.get_running_tasks(workspace)
        pending_tasks = db.get_pending_tasks(workspace)
        if (len(pending_tasks) == 0) and (len(running_tasks) == 0) and (len(paused_tasks) == 0):
            print("[+] There were no tasks to cancel. Are you sure you have the right workspace?\n")
            exit()

        if arguments["all"]:
            lib.cancel.cancel_tasks("all", workspace)
        elif arguments["<task_ids>"]:
            lib.cancel.cancel_tasks(arguments["<task_ids>"], workspace)
        exit()

    ####################################
    # Pause Command
    ####################################
    if arguments["pause"]:
        if arguments["-w"]:
            output_dir, workspace = lib.workspace.create_workspace(arguments["-w"], arguments)
        else:
            try:
                workspace = lib.db.get_current_workspace()[0][0]
                output_dir = lib.db.get_output_dir_for_workspace(workspace)[0][0]
            except:
                print("[!] There are no workspaces yet. Create one and run your command again:\n\n")
                print("./celerystalk workspace create -o output_dir                     #Default workspace")
                print("./celerystalk workspace create -o output_dir -w workspace_name   #Named workspace\n")
                exit()
        if arguments["all"]:
            num_paused = lib.pause.pause_running_tasks("all",workspace)
            sleep(3)
            num_paused = lib.pause.pause_running_tasks("all",workspace,repeat="True")
        elif arguments["<task_ids>"]:
            num_paused = lib.pause.pause_running_tasks(arguments["<task_ids>"], workspace)
        else:
            print("[!] You need to specify the tasks to pause, or specify \"all\".\n")
            exit()
        if num_paused > 0:
            print("\n")
        else:
            print("[+] There were no tasks to pause.\n")
        exit()

    ####################################
    # Resume command
    ####################################

    if arguments["resume"]:
        if arguments["-w"]:
            output_dir, workspace = lib.workspace.create_workspace(arguments["-w"], arguments)
        else:
            try:
                workspace = lib.db.get_current_workspace()[0][0]
                output_dir = lib.db.get_output_dir_for_workspace(workspace)[0][0]
            except:
                print("[!] There are no workspaces yet. Create one and run your command again:\n\n")
                print("./celerystalk workspace create -o output_dir                     #Default workspace")
                print("./celerystalk workspace create -o output_dir -w workspace_name   #Named workspace\n")
                exit()
        if arguments["all"]:
            num_resumed = lib.resume.resume_paused_tasks("all",workspace)
        elif arguments["<task_ids>"]:
            num_resumed = lib.resume.resume_paused_tasks(arguments["<task_ids>"], workspace)
        else:
            exit()
        if num_resumed > 0:
            print("\n")
        else:
            print("[+] There were no tasks to resume.\n")
        exit()

    ####################################
    # Shutdown Command
    ####################################

    if arguments["shutdown"]:
        lib.utils.shutdown_background_jobs()
        exit()


    ####################################
    # Report Command: Run Report
    ####################################
    if arguments["report"]:
        if arguments["-w"]:
            output_dir, workspace = lib.workspace.create_workspace(arguments["-w"], arguments)
        else:
            try:
                workspace = lib.db.get_current_workspace()[0][0]
                output_dir = lib.db.get_output_dir_for_workspace(workspace)[0][0]
            except:
                print("[!] There are no workspaces yet. Create one and run your command again:\n\n")
                print("./celerystalk workspace create -o output_dir                     #Default workspace")
                print("./celerystalk workspace create -o output_dir -w workspace_name   #Named workspace\n")
                exit()
        if arguments["-t"]:
            target_list = lib.utils.target_splitter(arguments["-t"])
            lib.report.report(workspace, target_list)
        else:
            lib.report.report(workspace)
        exit()

    ####################################
    # DB Command: Dump data from DB
    ####################################
    if arguments["db"]:
        if arguments["-w"]:
            output_dir, workspace = lib.workspace.create_workspace(arguments["-w"], arguments)
        else:
            try:
                workspace = lib.db.get_current_workspace()[0][0]
                output_dir = lib.db.get_output_dir_for_workspace(workspace)[0][0]
            except:
                print("[!] There are no workspaces yet. Create one and run your command again:\n\n")
                print("./celerystalk workspace create -o output_dir                     #Default workspace")
                print("./celerystalk workspace create -o output_dir -w workspace_name   #Named workspace\n")
                exit()

        if arguments["workspaces"]:

            columns = ["Workspace", "Output Directory"]
            workspace_rows = lib.db.get_all_workspaces()
            workspaces_table = PrettyTable(columns)
            workspaces_table.align[columns[1]] = "l"
            for row in workspace_rows:
                workspaces_table.add_row(row)
            print(workspaces_table)
            print("\n\n")
        else:
            if arguments["hosts"]:
                print("[+] Showing hosts for the [{0}] workspace\n".format(workspace))
                columns = ["IP","Vhost","In Scope","Explicit Out of Scope","Submitted"]
                host_rows = lib.db.get_vhosts_table(workspace)
                hosts_table = PrettyTable(columns)
                hosts_table.align[columns[0]] = "l"
                hosts_table.align[columns[1]] = "l"
                for row in host_rows:
                    hosts_table.add_row(row)
                print(hosts_table)
                print("\n\n")
            elif arguments["vhosts"]:
                print("[+] Showing vhosts for the [{0}] workspace\n".format(workspace))
                columns = ["IP","Vhost","In Scope","Explicit Out of Scope","Submitted"]
                host_rows = lib.db.get_vhosts_table(workspace)
                hosts_table = PrettyTable(columns)
                hosts_table.align[columns[0]] = "l"
                hosts_table.align[columns[1]] = "l"
                for row in host_rows:
                    if row[0] != row[1]:
                        hosts_table.add_row(row)
                print(hosts_table)
                print("\n\n")
            elif arguments["services"]:
                print("[+] Showing services for the [{0}] workspace\n".format(workspace))
                columns = ["IP", "Port", "Protocol","Service","Product","Version","Extra Info"]
                services_rows = lib.db.get_all_services(workspace)
                services_table = PrettyTable(columns)
                services_table.align[columns[0]] = "l"
                services_table.align[columns[1]] = "l"
                services_table.align[columns[3]] = "l"
                for row in services_rows:
                    services_table.add_row(row[0:7])
                print(services_table)
                print("\n\n")
            elif arguments["paths"]:
                print("[+] Showing paths for the [{0}] workspace\n".format(workspace))
                columns = ["IP", "Port", "Path"]
                paths_rows = lib.db.get_all_paths(workspace)
                paths_table = PrettyTable(columns)
                paths_table.align[columns[0]] = "l"
                paths_table.align[columns[1]] = "l"
                paths_table.align[columns[2]] = "l"
                for row in paths_rows:
                    paths_table.add_row(row[1:4])
                print(paths_table)
                print("\n\n")
            elif arguments["export"]:
                output_dir = db.get_output_dir_for_workspace(workspace)[0][0]
                #hosts
                host_rows = lib.db.get_vhosts_table(workspace)
                hosts_filename = workspace + "_hosts.csv"
                hosts_output_file = os.path.join(output_dir,hosts_filename)
                with open(hosts_output_file, 'wb') as f:
                    writer = csv.writer(f)
                    writer.writerow(["IP","vhost","in_scope","explicit_out_of_scope","submitted"])
                    writer.writerows(host_rows)
                print("[+] Saved all hosts in the [{0}] workspace to {1}".format(workspace, hosts_output_file))

                # services
                services_rows = lib.db.get_all_services(workspace)
                services_filename = workspace + "_services.csv"
                services_output_file = os.path.join(output_dir, services_filename)
                with open(services_output_file, 'wb') as f:
                    writer = csv.writer(f)
                    writer.writerow(["IP", "Port", "Protocol","Service","Product","Version","Extra Info"])
                    writer.writerows(services_rows)
                print("[+] Saved all ports in the [{0}] workspace to {1}".format(workspace,services_output_file))

                # paths
                paths_rows = lib.db.get_all_paths(workspace)
                paths_filename = workspace + "_paths.csv"
                paths_output_file = os.path.join(output_dir, paths_filename)
                with open(paths_output_file, 'wb') as f:
                    writer = csv.writer(f)
                    writer.writerow(["IP", "Port", "Path"])
                    writer.writerows(paths_rows)
                print("[+] Saved all paths in the [{0}] workspace to {1}.\n".format(workspace,paths_output_file))

    ####################################
    # Import Command: Import Stuff
    ####################################

    if arguments["import"]:
        if arguments["-w"]:
            output_dir,workspace = lib.workspace.create_workspace(arguments["-w"], arguments)
        else:
            try:
                workspace = lib.db.get_current_workspace()[0][0]
                output_dir = lib.db.get_output_dir_for_workspace(workspace)[0][0]
            except:
                print("[!] There are no workspaces yet. Create one and run your command again:\n\n")
                print("./celerystalk workspace create -o output_dir                     #Default workspace")
                print("./celerystalk workspace create -o output_dir -w workspace_name   #Named workspace\n")
                exit()
        lib.csimport.importcommand(workspace, output_dir, arguments)

    ####################################
    # subdomains Command
    ####################################
    if arguments["subdomains"]:
        lib.utils.start_services()
        if arguments["-w"]:
            output_dir, workspace = lib.workspace.create_workspace(arguments["-w"], arguments)
        else:
            try:
                workspace = lib.db.get_current_workspace()[0][0]
                output_dir = lib.db.get_output_dir_for_workspace(workspace)[0][0]
            except:
                print("[!] There are no workspaces yet. Create one and run your command again:\n\n")
                print("./celerystalk workspace create -o output_dir                     #Default workspace")
                print("./celerystalk workspace create -o output_dir -w workspace_name   #Named workspace\n")
                exit()
                exit()
        lib.scan.create_dns_recon_tasks(arguments["<domains>"], arguments["--simulation"], workspace, output_dir,scan_mode="VAPT")

        print("\n[+] To peak behind the curtain, view log/celeryWorker.log")
        print("[+] For a csv compatible record of every command execued, view log/cmdExecutionAudit.log\n")

    ####################################
    # ReScan Command
    ####################################
    if arguments["rescan"]:
        #print(arguments["scan"])
        if arguments["-w"]:
            output_dir, workspace = lib.workspace.create_workspace(arguments["-w"], arguments)
        else:
            try:
                workspace = lib.db.get_current_workspace()[0][0]
                output_dir = lib.db.get_output_dir_for_workspace(workspace)[0][0]
            except:
                print("[!] There are no workspaces yet. Create one and run your command again:\n\n")
                print("./celerystalk workspace create -o output_dir                     #Default workspace")
                print("./celerystalk workspace create -o output_dir -w workspace_name   #Named workspace\n")
                exit()

        arguments["scan"] = True
        all_submitted_vhosts = lib.db.get_inscope_submitted_vhosts(workspace)
        all_submitted_vhosts_list = []
        [all_submitted_vhosts_list.append(i[0]) for i in all_submitted_vhosts]  # converts list of tuples that contains the IPs, to a list of IPs
        if arguments["-t"]:
            target_list = lib.utils.target_splitter(arguments["-t"])
            for target in target_list:
                vhost = str(target)
                if str(vhost) not in all_submitted_vhosts_list:
                    print("[!] [{0}] has never been submitted, so it can't be rescanned.".format(vhost))
                else:
                    answer = raw_input("[!] {0} has already been scanned. Scan it again? [Y\\n] ".format(vhost))
                    if (answer == "Y") or (answer == "y") or (answer == ""):
                        ip = db.get_vhost_ip(vhost, workspace)[0][0]
                        db.update_vhosts_submitted(ip, vhost, workspace, 0)
        else:
            for submitted_vhost in all_submitted_vhosts:
                vhost = submitted_vhost[0]
                answer = raw_input("[!] {0} has already been scanned. Scan it again? [Y\\n] ".format(vhost))
                if (answer == "Y") or (answer == "y") or (answer == ""):
                    ip = db.get_vhost_ip(vhost,workspace)[0][0]
                    db.update_vhosts_submitted(ip, vhost, workspace, 0)

        print("\n[+] To peak behind the curtain, view log/celeryWorker.log")
        print("[+] For a csv compatible record of every command execued, view log/cmdExecutionAudit.log\n")

    ####################################
    # Scan Command
    ####################################

    if arguments["scan"]:
        lib.utils.start_services()
        celery_path = sys.path[0]
        if arguments["-w"]:
            output_dir, workspace = lib.workspace.create_workspace(arguments["-w"], arguments)
        else:
            try:
                workspace = lib.db.get_current_workspace()[0][0]
                output_dir = lib.db.get_output_dir_for_workspace(workspace)[0][0]
            except:
                print("[!] There are no workspaces yet. Create one and run your command again:\n\n")
                print("./celerystalk workspace create -o output_dir                     #Default workspace")
                print("./celerystalk workspace create -o output_dir -w workspace_name   #Named workspace\n")
                exit()


        ####################################
        # Scan - URL - Parse use provided URL and run all celerystalk tools against it
        ####################################
        if arguments["-u"]:
            lib.scan.process_url(arguments["-u"], workspace, output_dir, arguments)
            exit()
        elif arguments["-t"]:
            target_list = lib.utils.target_splitter(arguments["-t"])
            if arguments["-f"]:
                lib.csimport.importcommand(workspace, output_dir, arguments)
            lib.scan.process_db_vhosts(workspace, arguments["--simulation"],target_list=target_list)
        else:
            if arguments["-f"]:
                lib.csimport.importcommand(workspace, output_dir, arguments)
            #this one is the catch all if the user only types scan and nothing else.
            lib.scan.process_db_vhosts(workspace, arguments["--simulation"])

        print("\n[+] To peak behind the curtain, view log/celeryWorker.log")
        print("[+] For a csv compatible record of every command execued, view log/cmdExecutionAudit.log\n")




        # ####################################
        # # Scan - Bug Bounty mode - take domains, find subdomains, run nmap, run celerystalk (for ALL hosts in target file)
        # ####################################
        #
        # if arguments["<bb_scope_file>"]:
        #     scan_mode = "BB"
        #     in_scope_domains, in_scope_hosts, out_of_scope_hosts = lib.config_parser.read_bb_scope_ini(
        #         arguments["<bb_scope_file>"])
        #
        #
        #     #submit the in scope hosts to celery
        #     for in_scope_host in in_scope_hosts:
        #         in_scope_host = in_scope_host[0]
        #         #try:
        #         ip = socket.gethostbyname(in_scope_host)
        #
        #         #nmap_report = lib.scan.nmap_scan_subdomain_host(in_scope_host, workspace,arguments["--simulation"],output_dir)  # run nmap scan
        #         lib.scan.nmap_scan_subdomain_host(in_scope_host, workspace,arguments["--simulation"],output_dir)  # run nmap scan
        #         db_vhost = (ip, in_scope_host, 1, 0, workspace)  # in this mode all vhosts are in scope
        #         print(db_vhost)
        #         db.create_vhost(db_vhost)
        #         #lib.scan.process_nmap_data2(nmap_report, workspace)
        #         #lib.scan.process_db_services(output_dir, arguments["--simulation"], workspace)
        #         # except:
        #         #     print("2There was an issue running the nmap scan against {0}.").format(in_scope_host)
        #         #     ip = ""
        #         #     db_vhost = (ip, in_scope_host, 0, 0, workspace)  # not in scope if no IP
        #         #     print(db_vhost)
        #         #     db.create_vhost(db_vhost)
        #
        #     for domain in in_scope_domains:
        #         print("domain pulled from in scope domains")
        #         print(domain)
        #         lib.scan.subdomains(domain, arguments["--simulation"], workspace, output_dir,
        #                                  scan_mode,out_of_scope_hosts)
        #     #lib.scan.process_db_services(output_dir, arguments["--simulation"], workspace)



if __name__ == "__main__":
    arguments = docopt(__doc__, version='Build '+ build)
    #print(arguments)
    print_banner()
    if arguments["help"]:
       print(__doc__)
    main(arguments)


